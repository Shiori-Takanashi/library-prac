<?xml version="1.0" encoding="utf-8"?><testsuites name="pytest tests"><testsuite name="pytest" errors="0" failures="1" skipped="0" tests="9" time="0.104" timestamp="2025-07-11T15:45:25.015373+09:00" hostname="surface-shiori"><testcase classname="tests.test_data_file" name="test_json_files_exist" time="0.002" /><testcase classname="tests.test_data_file" name="test_json_readable[json_file0]" time="0.001" /><testcase classname="tests.test_data_file" name="test_json_readable[json_file1]" time="0.001" /><testcase classname="tests.test_data_file" name="test_json_readable[json_file2]" time="0.001" /><testcase classname="tests.test_data_file" name="test_validate_json_schema[get_book_json_files-required_keys0-book]" time="0.001" /><testcase classname="tests.test_data_file" name="test_validate_json_schema[get_user_json_files-required_keys1-user]" time="0.001" /><testcase classname="tests.test_data_file" name="test_duplicate_value[json_file0]" time="0.001" /><testcase classname="tests.test_data_file" name="test_duplicate_value[json_file1]" time="0.001"><failure message="Failed: Duplicate value '河童' found for key 'title' in C:\Users\ns69a\winprojects\library-lesson\sample\books\list_02.json">json_file = WindowsPath('C:/Users/ns69a/winprojects/library-lesson/sample/books/list_02.json')

    @pytest.mark.parametrize("json_file", get_book_json_files() + get_user_json_files())
    def test_duplicate_value(json_file: Path) -&gt; None:
        with open(json_file, "r", encoding="utf-8") as f:
            data = json.load(f)
    
        if not data:
            pytest.fail(f"No data found in {json_file}")
    
        if not isinstance(data, list):
            pytest.fail(f"Expected a list in {json_file}, got {type(data).__name__}")
    
        all_keys = set().union(*(entry.keys() for entry in data))
        if "isbn" in all_keys:
            keys_to_check = ["title", "isbn"]
        else:
            keys_to_check = ["id"]
    
        for key in keys_to_check:
            seen_values = set()
            for entry in data:
                if key not in entry:
                    pytest.fail(f"Missing key '{key}' in an entry of {json_file}")
                value = entry[key]
                if value in seen_values:
&gt;                   pytest.fail(
                        f"Duplicate value '{value}' found for key '{key}' in {json_file}"
                    )
E                   Failed: Duplicate value '河童' found for key 'title' in C:\Users\ns69a\winprojects\library-lesson\sample\books\list_02.json

tests\test_data_file.py:88: Failed</failure></testcase><testcase classname="tests.test_data_file" name="test_duplicate_value[json_file2]" time="0.001" /></testsuite></testsuites>